<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0">
    <meta name="author" content="Colorlib">
    <meta name="description" content="#">
    <meta name="keywords" content="#">
    <!-- Page Title -->
    <title>Nearclick</title>
    <!-- Bootstrap CSS -->
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,400i,500,700,900" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.css">

    <!-- Simple line Icon -->
    <link rel="stylesheet" href="/assets/simple-line-icons.css">
    <!-- Themify Icon -->
    <link rel="stylesheet" href="/assets/themify-icons.css">
    <!-- Hover Effects -->
    <link rel="stylesheet" href="/assets/set1.css">
    <!-- Main CSS -->
    <link rel="stylesheet" href="/assets/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">

</head>
<% if current_or_guest_user.search_area? %>
<br>
<br>
<br
          <h5><b>Your Current Location:</b></h5>
                              <form class="form-wrap mt-4">
                                  
                                    <div class="btn-group" role="group" aria-label="Basic example">
                                      <div class="select-wapper">
                                        <%= select_tag :state, options_for_select([["Select a state",""]] + State.all.map { |c| [c.name, c.id] },selected: current_or_guest_user.search_state ), id: "state"%>
                                        </div>
                                        <div class="select-wapper">
                                        <%= select_tag :city, options_for_select([["Select a City",""]] + City.all.map { |c| [c.name, c.id] }, selected: current_or_guest_user.search_city), :id => 'city' %>
                                        </div>
                                        <div class="select-wapper">
                                        <%= select_tag :area, options_for_select([["Select a Area",""]] + Area.all.map { |c| [c.name, c.id] }, selected: current_or_guest_user.search_area), :id => 'area' %>
                                        </div>
                                        
                                        <input type="text" style="display:none;" placeholder="What are you looking for?" id="search" class="btn-group1">
                                       
                                        
                                        <a href="/welcome/search" class="btn-form search-btn">Submit<i class="pe-7s-angle-right"></i></a>
                                        
                                    </div>
                  </form>
                  



                  <% else %>
                  <a href="/welcome/home" class="btn-form">Add Location Now<i class="pe-7s-angle-right"></i></a>
                  <% end %>
                  
                   <script>
        $(window).scroll(function() {
            // 100 = The point you would like to fade the nav in.

            if ($(window).scrollTop() > 100) {

                $('.fixed').addClass('is-sticky');

            } else {

                $('.fixed').removeClass('is-sticky');

            };
        });
        var selectedCity;
        $("select#state").change(function() {

          var id_value_string = $(this).val();
          console.log('id___________________', id_value_string);
          if (id_value_string == "") {
           $("select#city option").remove();
           var row = "<option value=\"" + "" + "\">" + "city" + "</option>";
           $(row).appendTo("select#city");
          } else {
           // Send the request and update city dropdown
            getCitiesOfState(id_value_string)
           
          }
         });
        $(".search-btn").on("click", function(e){
          e.preventDefault()
          var $this = $(this);
          var $href = $this.attr("href");
          var state = $("#state").val()
          var city = $("#city").val()
          var search = $("#search").val()
          window.location = $href + '?search=' + search+ "&state=" +state+ "&city="+ city
        })
        function getCitiesOfState(val){
        $.ajax({
          dataType: "json",
          cache: false,
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          url: '/get_cities_by_state',
          type: 'post',
          data: {"state" : val},
          timeout: 5000,
          error: function(XMLHttpRequest, errorTextStatus, error) {
           alert("Failed to submit : " + errorTextStatus + " ;" + error);
          },
          success: function(data) {
              console.log('a___________________', data);
           // Clear all options from city select
           $("select#city option").remove();
           //put in a empty default line
           // Fill city select

           var row = "<option value=\"" + "" + "\">" + "Select a city" + "</option>";
           $(row).appendTo("select#city");
           $.each(data, function(i, j) {
            if(j.id == selectedCity){
              row = "<option value=\"" + j.id + "\" selected>" + j.name + "</option>";
            }else{
              row = "<option value=\"" + j.id + "\">" + j.name + "</option>"; 
            }
            $(row).appendTo("select#city");
           });
          }
         });
        }

        // on change city get area
        var selectedArea;
        $("select#city").change(function() {
          var city_id = $(this).val();
          if (city_id == "") {
           $("select#area option").remove();
           var row = "<option value=\"" + "" + "\">" + "city" + "</option>";
           $(row).appendTo("select#area");
          } else {
           // Send the request and update city dropdown
            getAreasOfCity(city_id)
           
          }
        });
        $(".search-btn").on("click", function(e){
          e.preventDefault()
          var $this = $(this);
          var $href = $this.attr("href");
          var state = $("#state").val();
          var city = $("#city").val();
          var area = $("#area").val();
          var search = $("#search").val()
          window.location = $href + '?search=' + search+ "&state=" +state+ "&city="+ city+ "&area=" +area
        })
        function getAreasOfCity(val){
        $.ajax({
          dataType: "json",
          cache: false,
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          url: '/get_areas_by_city',
          type: 'post',
          data: {"city" : val},
          timeout: 5000,
          error: function(XMLHttpRequest, errorTextStatus, error) {
           alert("Failed to submit : " + errorTextStatus + " ;" + error);
          },
          success: function(data) {
           // Clear all options from city select
           $("select#area option").remove();
           //put in a empty default line
           // Fill city select

           var row = "<option value=\"" + "" + "\">" + "Select a area" + "</option>";
           $(row).appendTo("select#area");
           $.each(data, function(i, j) {
            if(j.id == selectedArea){
              row = "<option value=\"" + j.id + "\" selected>" + j.name + "</option>";
            }else{
              row = "<option value=\"" + j.id + "\">" + j.name + "</option>"; 
            }
            $(row).appendTo("select#area");
           });
          }
         });
        }
    </script>
</html>
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>

  <script>
  $( function() {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );
 
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";
 
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .attr("placeholder", "State")
          .addClass( "custom-input" )
          .css('width','120px')
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            classes: {
              "ui-tooltip": "ui-state-highlight"
            }
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
            ui.item.option.selected = true;
            this._trigger( "select", event, {
              item: ui.item.option
            });
          },
 
          autocompletechange: "_removeIfInvalid"
        });
      },
 
      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;
 
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right custom-position")
          .on( "mousedown", function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible")
          })
          .on( "click", function() {
            //input.trigger( "focus" );
 
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
 
            // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          });
      },
 
      _source: function( request, response ) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
        response( this.element.children( "option" ).map(function() {
            var text = $( this ).text();
            var value = $(this).val();
          if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              val: value,
              option: this
            };
        }) );
      },
 
      _removeIfInvalid: function( event, ui ) {
        console.log("change__________________", ui.item);
        // Selected an item, nothing to do
 
        // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;
            return false;
          }
        });
        // Found a match, nothing to do
        if ( valid ) {
            console.log('found_____________', ui.item.val);
            getCitiesOfState(ui.item.val)
            $("#city input").trigger('focus');
            return;
        }
 
        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.autocomplete( "instance" ).term = "";
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
 
    $( "#state" ).combobox();
  });
  $( function() {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );
 
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";
 
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .attr("placeholder", "District")
          .addClass( "custom-input" )
          .css('width','120px')
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            classes: {
              "ui-tooltip": "ui-state-highlight"
            }
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
            ui.item.option.selected = true;
            this._trigger( "select", event, {
              item: ui.item.option
            });
          },
 
          autocompletechange: "_removeIfInvalid"
        });
      },
 
      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;
 
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right custom-position")
          .on( "mousedown", function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible")
          })
          .on( "click", function() {
            input.trigger( "focus" );
 
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
 
            // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          });
      },
 
      _source: function( request, response ) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
        response( this.element.children( "option" ).map(function() {
          var text = $( this ).text();
          var val = $( this ).val();
          if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              val: val,
              option: this
            };
        }) );
      },
 
      _removeIfInvalid: function( event, ui ) {
 
        // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;
            return false;
          }
        });
 
        // Found a match, nothing to do
        if ( valid ) {
            getAreasOfCity(ui.item.val)
            return;
        }
 
        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.autocomplete( "instance" ).term = "";
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
 
    $( "#city" ).combobox();
  });
  $( function() {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );
 
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";
 
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .attr("placeholder", "Area")
          .addClass( "custom-input" )
          .css('width','105px')
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            classes: {
              "ui-tooltip": "ui-state-highlight"
            }
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
            ui.item.option.selected = true;
            this._trigger( "select", event, {
              item: ui.item.option
            });
          },
 
          autocompletechange: "_removeIfInvalid"
        });
      },
 
      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;
 
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right custom-position")
          .on( "mousedown", function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible")
          })
          .on( "click", function() {
            input.trigger( "focus" );
 
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
 
            // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          });
      },
 
      _source: function( request, response ) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
        response( this.element.children( "option" ).map(function() {
          var text = $( this ).text();
          if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
      },
 
      _removeIfInvalid: function( event, ui ) {
 
        // Selected an item, nothing to do
        if ( ui.item ) {
          return;
        }
 
        // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;
            return false;
          }
        });
 
        // Found a match, nothing to do
        if ( valid ) {
          return;
        }
 
        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.autocomplete( "instance" ).term = "";
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
 
    $( "#area" ).combobox();
  });
  </script>